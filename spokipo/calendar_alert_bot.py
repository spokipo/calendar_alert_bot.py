import os
import asyncio
import requests
from bs4 import BeautifulSoup
from datetime import datetime, timedelta
from telegram import Bot
from http.server import HTTPServer, BaseHTTPRequestHandler
import threading

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")
THREAD_ID = os.getenv("MESSAGE_THREAD_ID")  # –ú–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º

bot = Bot(token=BOT_TOKEN)

CHECK_INTERVAL = 60  # –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)
DAILY_ALERT_HOUR = 8  # 08:00 –ø–æ –ö–∏–µ–≤—É

sent_events = set()
reminded_events = set()

# === –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å Investing.com ===
def fetch_events():
    url = "https://www.investing.com/economic-calendar/"
    headers = {
        "User-Agent": "Mozilla/5.0",
        "X-Requested-With": "XMLHttpRequest"
    }

    try:
        resp = requests.get(url, headers=headers, timeout=10)
        soup = BeautifulSoup(resp.content, "html.parser")
        rows = soup.select("tr.js-event-item")

        events = []
        for row in rows:
            impact = row.select_one(".sentiment .grayFullBullish")
            if not impact or len(impact.select("i")) < 3:
                continue  # –Ω–µ "–∫—Ä–∞—Å–Ω–∞—è" –Ω–æ–≤–æ—Å—Ç—å

            currency = row.get("data-event-currency")
            timestamp = row.get("data-event-datetime")
            title = row.get("data-event-title")

            if not (timestamp and title and currency):
                continue

            dt = datetime.utcfromtimestamp(int(timestamp)) + timedelta(hours=3)  # UTC+3 (–ö–∏–µ–≤)

            events.append({
                "key": f"{currency}_{title}_{dt.isoformat()}",
                "title": title,
                "currency": currency,
                "datetime": dt,
            })

        return events

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:", e)
        return []

# === –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ===
async def send_message(text):
    try:
        await bot.send_message(
            chat_id=CHAT_ID,
            text=text,
            parse_mode="HTML",
            message_thread_id=int(THREAD_ID) if THREAD_ID else None
        )
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", e)

# === –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç ===
async def send_daily_summary(events):
    if not events:
        return

    today = datetime.now().strftime('%d.%m.%Y')
    lines = [f"üìÖ <b>–ö—Ä–∞—Å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today}):</b>\n"]

    for e in events:
        if e['datetime'].date() == datetime.now().date():
            lines.append(f"üïí {e['datetime'].strftime('%H:%M')} ‚Äî <b>{e['title']}</b> ({e['currency']})")

    if len(lines) > 1:
        await send_message("\n".join(lines))

# === –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ—Å—Ç—å—é ===
async def check_and_notify(events):
    now = datetime.now()
    for e in events:
        if e["key"] in sent_events:
            continue

        # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 10 –º–∏–Ω—É—Ç
        if e["key"] not in reminded_events and 0 < (e["datetime"] - now).total_seconds() <= 600:
            reminded_events.add(e["key"])
            await send_message(f"‚è∞ <b>–ß–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç:</b> {e['title']} ({e['currency']}) –≤ {e['datetime'].strftime('%H:%M')}")

        # –ù–æ–≤–æ—Å—Ç—å –Ω–∞—á–∞–ª–∞—Å—å ‚Äî –±–æ–ª—å—à–µ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º
        if now >= e["datetime"]:
            sent_events.add(e["key"])

# === –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª ===
async def main():
    print("üöÄ –ë–æ—Ç –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∑–∞–ø—É—â–µ–Ω.")
    await send_message("üöÄ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª–µ–¥–∏—Ç –∑–∞ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º.")

    last_summary_date = None

    while True:
        now = datetime.now()
        events = fetch_events()

        # –£—Ç—Ä–µ–Ω–Ω–∏–π –¥–∞–π–¥–∂–µ—Å—Ç
        if now.hour == DAILY_ALERT_HOUR and (last_summary_date != now.date()):
            await send_daily_summary(events)
            last_summary_date = now.date()

        await check_and_notify(events)
        await asyncio.sleep(CHECK_INTERVAL)

# === HTTP-—Å–µ—Ä–≤–µ—Ä –¥–ª—è Render
class DummyHandler(BaseHTTPRequestHandler):
    def do_GET(self):
        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Bot is running.")

def run_http_server():
    server = HTTPServer(('0.0.0.0', 10000), DummyHandler)
    print("üåê HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 10000")
    server.serve_forever()

# === –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    threading.Thread(target=run_http_server, daemon=True).start()
    asyncio.run(main())
